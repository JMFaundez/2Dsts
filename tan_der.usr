c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      character*80 infile_bc
      real dudx(lx1*ly1*lz1,lelv,3) ! field derivative
      real*8 sin_a(lx1,ly1,lz1,lelv), cos_a(lx1,ly1,lz1,lelv),
     $        msin_a(lx1,ly1,lz1,lelv)
      real*8  dtdn(lx1,ly1,lz1,lelv), dwdn(lx1,ly1,lz1,lelv)
      COMMON / sincos / sin_a, cos_a, msin_a 
      integer nfiles
      character*10 s(10)
      
      infile_bc = 'alpha_2d.fld'
      initc(1) = infile_bc
      call setics
      call copy(sin_a,vx,lx1*ly1*lz1*lelv)
      call copy(msin_a,vx,lx1*ly1*lz1*lelv)
      call chsign(msin_a,lx1*ly1*lz1*lelv)
      call copy(cos_a,vy,lx1*ly1*lz1*lelv)
      ! Load the base flow and store it
      infile_bc = 'pert0.f00001' 
      initc(1) = infile_bc
      call setics
      
      !call vdot2(ut,vx,vy,cos_a,sin_a,lx1*ly1*lz1*lelv)
      !call vdot2(un,vx,vy,msin_a,cos_a,lx1*ly1*lz1*lelv)


      
      call gradm1(dudx(1,1,1),dudx(1,1,2),dudx(1,1,3),vx)
      call vdot2(dtdn,dudx(1,1,1),dudx(1,1,2),msin_a,cos_a,
     $             lx1*ly1*lz1*lelv)
      call gradm1(dudx(1,1,1),dudx(1,1,2),dudx(1,1,3),vy)
      call vdot2(dwdn,dudx(1,1,1),dudx(1,1,2),msin_a,cos_a,
     $             lx1*ly1*lz1*lelv)
      call outpost(dtdn,dwdn,vz,pr,t,'der')
      
      if (nid.eq.0) write(*,*) 'Finished'
      call exitt0
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end

c-----------------------------------------------------------------------
      subroutine normal_der(duT, ut)
      include 'SIZE'
      include 'TOTAL'

      real*8 sin_a(lx1,ly1,lz1,lelv), cos_a(lx1,ly1,lz1,lelv),
     $        msin_a(lx1,ly1,lz1,lelv)
      real*8  duT(lx1,ly1,lz1,lelv), ut(lx1,ly1,lz1,lelv)
      real*8 dudx(lx1*ly1*lz1,lelv,3) ! field derivative
      COMMON / sincos / sin_a, cos_a, msin_a 
     
      ! Compute normal derivative
      call gradm1(dudx(1,1,1),dudx(1,1,2),dudx(1,1,3),ut)
      call vdot2(duT,dudx(1,1,1),dudx(1,1,2),
     $            msin_a,cos_a,lx1*ly1*lz1*lelv)

      return
      end

c-----------------------------------------------------------------------
      subroutine tangent_vel(ut, ux,uy)
      include 'SIZE'
      include 'TOTAL'

      real*8 sin_a(lx1,ly1,lz1,lelv), cos_a(lx1,ly1,lz1,lelv),
     $        msin_a(lx1,ly1,lz1,lelv)
      real*8   ut(lx1,ly1,lz1,lelv), ux(lx1,ly1,lz1,lelv),
     $           uy(lx1,ly1,lz1,lelv)
      COMMON / sincos / sin_a, cos_a, msin_a 

      ! Compute tangential velocity
      call vdot2(ut,ux,uy,cos_a,sin_a,lx1*ly1*lz1*lelv)
      return
      end
      
